// Generated 10 Nov 2021 11:59 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.OrderDetails
{
    [Serializable]
    public class OrderDetail
     : SingularBusinessBase<OrderDetail>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> OrderDetailsIDProperty = RegisterProperty<int>(c => c.OrderDetailsID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int OrderDetailsID
        {
            get { return GetProperty(OrderDetailsIDProperty); }
        }

        public static PropertyInfo<int?> OrderIDProperty = RegisterProperty<int?>(c => c.OrderID, "Order", null);
        /// <summary>
        /// Gets and sets the Order value
        /// </summary>
        [Display(Name = "Order", Description = ""),
        Required(ErrorMessage = "Order required")]
        public int? OrderID
        {
            get { return GetProperty(OrderIDProperty); }
            set { SetProperty(OrderIDProperty, value); }
        }

        public static PropertyInfo<int?> UserIDProperty = RegisterProperty<int?>(c => c.UserID, "User", null);
        /// <summary>
        /// Gets and sets the User value
        /// </summary>
        [Display(Name = "User", Description = ""),
        Required(ErrorMessage = "User required")]
        public int? UserID
        {
            get { return GetProperty(UserIDProperty); }
            set { SetProperty(UserIDProperty, value); }
        }

        public static PropertyInfo<int?> SnackIDProperty = RegisterProperty<int?>(c => c.SnackID, "Snack", null);
        /// <summary>
        /// Gets and sets the Snack value
        /// </summary>
        [Display(Name = "Snack", Description = ""),
        Required(ErrorMessage = "Snack required")]
        public int? SnackID
        {
            get { return GetProperty(SnackIDProperty); }
            set { SetProperty(SnackIDProperty, value); }
        }

        public static PropertyInfo<int> QuantityProperty = RegisterProperty<int>(c => c.Quantity, "Quantity", 0);
        /// <summary>
        /// Gets and sets the Quantity value
        /// </summary>
        [Display(Name = "Quantity", Description = "")]
        public int Quantity
        {
            get { return GetProperty(QuantityProperty); }
            set { SetProperty(QuantityProperty, value); }
        }

        public static PropertyInfo<Decimal> ItemPriceProperty = RegisterProperty<Decimal>(c => c.ItemPrice, "Item Price", 0D);
        /// <summary>
        /// Gets and sets the Item Price value
        /// </summary>
        [Display(Name = "Item Price", Description = "")]
        public Decimal ItemPrice
        {
            get { return GetProperty(ItemPriceProperty); }
            set { SetProperty(ItemPriceProperty, value); }
        }

        public static PropertyInfo<int> DeliveryIDProperty = RegisterProperty<int>(c => c.DeliveryID, "Delivery", 0);
        /// <summary>
        /// Gets and sets the Delivery value
        /// </summary>
        [Display(Name = "Delivery", Description = ""),
        Required(ErrorMessage = "Delivery required")]
        public int DeliveryID
        {
            get { return GetProperty(DeliveryIDProperty); }
            set { SetProperty(DeliveryIDProperty, value); }
        }

        public static PropertyInfo<DateTime?> DeletedDateProperty = RegisterProperty<DateTime?>(c => c.DeletedDate, "Deleted Date");
        /// <summary>
        /// Gets and sets the Deleted Date value
        /// </summary>
        [Display(Name = "Deleted Date", Description = "")]
        public DateTime? DeletedDate
        {
            get
            {
                return GetProperty(DeletedDateProperty);
            }
            set
            {
                SetProperty(DeletedDateProperty, value);
            }
        }

        public static PropertyInfo<int> DeletedByProperty = RegisterProperty<int>(c => c.DeletedBy, "Deleted By", 0);
        /// <summary>
        /// Gets and sets the Deleted By value
        /// </summary>
        [Display(Name = "Deleted By", Description = "")]
        public int DeletedBy
        {
            get { return GetProperty(DeletedByProperty); }
            set { SetProperty(DeletedByProperty, value); }
        }

        public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Created Date value
        /// </summary>
        [Display(AutoGenerateField = false),
            Browsable(true)]
        public SmartDate CreatedDate
        {
            get { return GetProperty(CreatedDateProperty); }
        }

        public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
        /// <summary>
        /// Gets the Created By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int CreatedBy
        {
            get { return GetProperty(CreatedByProperty); }
        }

        public static PropertyInfo<SmartDate> ModifiedDateProperty = RegisterProperty<SmartDate>(c => c.ModifiedDate, "Modified Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Modified Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate ModifiedDate
        {
            get { return GetProperty(ModifiedDateProperty); }
        }

        public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
        /// <summary>
        /// Gets the Modified By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int ModifiedBy
        {
            get { return GetProperty(ModifiedByProperty); }
        }


        public static PropertyInfo<String> SnackTitleProperty = RegisterProperty<String>(c => c.SnackTitle, "Snack Title", "");
        /// <summary>
        /// Gets and sets the Snack Title value
        /// </summary>
        [Display(Name = "Snack Title", Description = "Title of the Snack"),
        StringLength(200, ErrorMessage = "Snack Title cannot be more than 200 characters")]
        public String SnackTitle
        {
            get { return GetProperty(SnackTitleProperty); }
            set { SetProperty(SnackTitleProperty, value); }
        }

        public static PropertyInfo<String> DeliveryTypeProperty = RegisterProperty<String>(c => c.DeliveryType, "Delivery Type", "");
        /// <summary>
        /// Gets and sets the Delivery Type value
        /// </summary>
        [Display(Name = "Delivery Type", Description = ""),
        StringLength(50, ErrorMessage = "Delivery Type cannot be more than 50 characters")]
        public String DeliveryType
        {
            get { return GetProperty(DeliveryTypeProperty); }
            set { SetProperty(DeliveryTypeProperty, value); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(OrderDetailsIDProperty);
        }

        public override string ToString()
        {
            if (this.CreatedDate.ToString().Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Order Detail");
                }
                else
                {
                    return String.Format("Blank {0}", "Order Detail");
                }
            }
            else
            {
                return this.CreatedDate.ToString();
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewOrderDetail() method.
        }

        public static OrderDetail NewOrderDetail()
        {
            return DataPortal.CreateChild<OrderDetail>();
        }

        public OrderDetail()
        {
            MarkAsChild();
        }

        internal static OrderDetail GetOrderDetail(SafeDataReader dr)
        {
            var o = new OrderDetail();
            o.Fetch(dr);
            return o;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(OrderDetailsIDProperty, sdr.GetInt32(i++));
                LoadProperty(OrderIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(UserIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(SnackIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(QuantityProperty, sdr.GetInt32(i++));
                LoadProperty(ItemPriceProperty, sdr.GetDecimal(i++));
                LoadProperty(DeliveryIDProperty, sdr.GetInt32(i++));
                LoadProperty(DeletedDateProperty, sdr.GetValue(i++));
                LoadProperty(DeletedByProperty, sdr.GetInt32(i++));
                LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
                LoadProperty(ModifiedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
                LoadProperty(SnackTitleProperty, sdr.GetString(i++));
                LoadProperty(DeliveryTypeProperty, sdr.GetString(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            LoadProperty(ModifiedByProperty, Settings.CurrentUser.UserID);

            AddPrimaryKeyParam(cm, OrderDetailsIDProperty);

            cm.Parameters.AddWithValue("@OrderID", GetProperty(OrderIDProperty));
            cm.Parameters.AddWithValue("@UserID", GetProperty(UserIDProperty));
            cm.Parameters.AddWithValue("@SnackID", GetProperty(SnackIDProperty));
            cm.Parameters.AddWithValue("@Quantity", GetProperty(QuantityProperty));
            cm.Parameters.AddWithValue("@ItemPrice", GetProperty(ItemPriceProperty));
            cm.Parameters.AddWithValue("@DeliveryID", GetProperty(DeliveryIDProperty));
            cm.Parameters.AddWithValue("@DeletedDate", Singular.Misc.NothingDBNull(DeletedDate));
            cm.Parameters.AddWithValue("@DeletedBy", GetProperty(DeletedByProperty));
            cm.Parameters.AddWithValue("@ModifiedBy", GetProperty(ModifiedByProperty));
            cm.Parameters.AddWithValue("@SnackTitle", GetProperty(SnackTitleProperty));
            cm.Parameters.AddWithValue("@DeliveryType", GetProperty(DeliveryTypeProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(OrderDetailsIDProperty, scm.Parameters["@OrderDetailsID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@OrderDetailsID", GetProperty(OrderDetailsIDProperty));
        }

        #endregion

    }

}